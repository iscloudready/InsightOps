version: '3'

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-healthcheck: &default-healthcheck
  interval: 10s
  timeout: 5s
  retries: 5
  start_period: 30s

services:
  # Infrastructure Components
  postgres:
    image: postgres:13
    container_name: ${NAMESPACE:-insightops}_db
    environment:
      POSTGRES_USER: ${DB_USER:-insightops_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-insightops_pwd}
      POSTGRES_DB: ${DB_NAME:-insightops_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5433}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-insightops_user} -d ${DB_NAME:-insightops_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging: *default-logging

  grafana:
    image: grafana/grafana:latest
    container_name: ${NAMESPACE:-insightops}_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-InsightOps2024!}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/dashboards/overview.json
    volumes:
      - grafana_data:/var/lib/grafana
      - ${CONFIG_PATH}/grafana/provisioning:/etc/grafana/provisioning:ro
      - ${CONFIG_PATH}/grafana/dashboards:/etc/grafana/dashboards:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health"]
    logging: *default-logging
    depends_on:
      - postgres

  prometheus:
    image: prom/prometheus:latest
    container_name: ${NAMESPACE:-insightops}_prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9091}:9090"
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
    logging: *default-logging
    depends_on:
      - postgres

  loki:
    image: grafana/loki:2.9.3
    container_name: ${NAMESPACE:-insightops}_loki
    user: "root"
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
      - ${CONFIG_PATH}/loki_wal:/loki/wal
    ports:
      - "${LOKI_PORT:-3101}:3100"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    logging: *default-logging
    depends_on:
      - postgres

  tempo:
    image: grafana/tempo:latest
    container_name: ${NAMESPACE:-insightops}_tempo
    user: root
    command: ["-config.file=/etc/tempo/tempo.yaml"]
    environment:
      - TEMPO_LOG_LEVEL=debug
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo/tempo.yaml:ro
      - tempo_data:/var/tempo
    ports:
      - "${TEMPO_PORT:-4317}:4317"
      - "${TEMPO_HTTP_PORT:-4318}:4318"
      - "3200:3200"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3200/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging: *default-logging
    depends_on:
      - postgres

  # Application Microservices
  orderservice:
    build:
      context: .
      dockerfile: ./OrderService/Dockerfile
    container_name: ${NAMESPACE:-insightops}_orderservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_HTTP_PORTS=80
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__Postgres=Host=postgres;Port=5432;Database=insightops_db;Username=insightops_user;Password=insightops_pwd
    volumes:
      - ${PROJECT_ROOT:-..}/OrderService/appsettings.Docker.json:/app/appsettings.Docker.json:ro
    ports:
      - "${ORDERSERVICE_PORT:-7265}:80"
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 40s

  inventoryservice:
    build:
      context: .
      dockerfile: ./InventoryService/Dockerfile
    container_name: ${NAMESPACE:-insightops}_inventoryservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__Postgres=Host=postgres;Port=5432;Database=insightops_db;Username=insightops_user;Password=insightops_pwd
    volumes:
      - ${PROJECT_ROOT:-..}/InventoryService/appsettings.Docker.json:/app/appsettings.Docker.json:ro
    ports:
      - "${INVENTORYSERVICE_PORT:-7070}:80"
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 40s

  apigateway:
    build:
      context: .
      dockerfile: ./ApiGateway/Dockerfile
    container_name: ${NAMESPACE:-insightops}_apigateway
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
    volumes:
      - ${PROJECT_ROOT:-..}/ApiGateway/appsettings.Docker.json:/app/appsettings.Docker.json:ro
    ports:
      - "${APIGATEWAY_PORT:-7237}:80"
    depends_on:
      - orderservice
      - inventoryservice
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: .
      dockerfile: ./FrontendService/Dockerfile
    container_name: ${NAMESPACE:-insightops}_frontend
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
      - DataProtection__Keys=/app/Keys
    user: "1001:1001"
    volumes:
      - ${PROJECT_ROOT:-..}/FrontendService/appsettings.Docker.json:/app/appsettings.Docker.json:ro
      - keys_data:/app/Keys
    ports:
      - "${FRONTEND_PORT:-5010}:80"
    depends_on:
      - apigateway
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    name: ${NAMESPACE:-insightops}_postgres_data
  grafana_data:
    name: ${NAMESPACE:-insightops}_grafana_data
  prometheus_data:
    name: ${NAMESPACE:-insightops}_prometheus_data
  loki_data:
    name: ${NAMESPACE:-insightops}_loki_data
  tempo_data:
    name: ${NAMESPACE:-insightops}_tempo_data
  loki_wal:
    name: ${NAMESPACE:-insightops}_loki_wal
  frontend_keys:
    name: ${NAMESPACE:-insightops}_frontend_keys
  keys_data:
    name: ${NAMESPACE:-insightops}_keys_data
    driver: local
    driver_opts:
      type: none
      device: ${CONFIG_PATH}/Keys
      o: bind

networks:
  default:
    name: ${NAMESPACE:-insightops}_network
    driver: bridge